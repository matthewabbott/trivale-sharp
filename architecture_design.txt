# Trivale: Architecture Design Document

## Core Concept
A terminal-based cyberpunk card game where the interface itself is part of the experience. Players take on the role of netrunners who perceive cyberspace through the lens of card games, with the ability to manage multiple concurrent encounters through a MEM slot system.

## Architecture Overview

### System Components

1. **Core Engine Layer**
   - ProcessSlotRegistry (source of truth for process-slot mapping)
   - ProcessManager (manages process lifecycle)
   - SlotManager (manages memory slots and resources)
   - SceneOrchestrator (handles scene lifecycle and transitions)
   - SystemEventBus (facilitates decoupled communication)

2. **Interface Layer**
   - MainTerminal (main interface container)
   - SlotGridSystem (slot visualization and interaction logic)
   - SlotGridDisplay (visual representation of slots)
   - MainMenuScene (menu options and interactions)
   - ResourcePanel (system resource monitoring)

3. **Game Layer**
   - GameState (facade to card game state)
   - PlayerManager (manages player hands and actions)
   - TrickTakingGame (core game logic)
   - AIController (computer opponent behavior)
   - DeckManager (card management)

### Component Relationships

```mermaid
graph TD
    A[SimpleMainMenu] --> B[ProcessSlotRegistry]
    A --> C[ProcessManager]
    A --> D[SlotManager]
    A --> E[SceneOrchestrator]
    A --> F[SlotGridSystem]
    
    B <--> C
    C <--> D
    B <--> E
    F <--> B
    
    F --> G[SlotGridDisplay]
    E --> H[MainMenuScene]
    E --> I[CardGameScene]
    E --> J[DebugScene]
    
    K[SystemEventBus] <--> B
    K <--> C
    K <--> D
    K <--> E
```

### Process-Slot System

The process-slot system is built around these key components:

1. **ProcessSlotRegistry**: Central source of truth for which process is in which slot
   ```csharp
   public class ProcessSlotRegistry
   {
       // Maps processes to slots and vice versa
       private Dictionary<string, string> _processToSlot;
       private Dictionary<string, string> _slotToProcess;
       
       // Events for state changes
       public event Action<string, string> ProcessSlotMappingChanged;
       public event Action<string> ActiveProcessChanged;
       
       // Current active process
       public string ActiveProcessId { get; private set; }
       
       // Methods for working with the registry
       public void RegisterProcessSlot(string processId, string slotId);
       public void UnregisterProcess(string processId);
       public void SetActiveProcess(string processId);
       public string GetSlotForProcess(string processId);
       public string GetProcessForSlot(string slotId);
   }
   ```

2. **ProcessManager**: Manages process lifecycle and interacts with slot management
   ```csharp
   public interface IProcessManager
   {
       event Action<string, string> ProcessStarted;
       event Action<string> ProcessEnded;
       event Action<string> ProcessStateChanged;
       
       string CreateProcess(string processType, Dictionary<string, object> initParams = null, string specificId = null);
       bool StartProcess(string processId, out string slotId);
       bool UnloadProcess(string processId);
       IProcess GetProcess(string processId);
       IReadOnlyList<string> GetActiveProcessIds();
       string GetProcessSlotId(string processId);
   }
   ```

3. **SlotManager**: Handles memory slots and their states
   ```csharp
   public interface ISlotManager
   {
       event Action<string, SlotStatus> SlotStatusChanged;
       event Action<string> SlotUnlocked;
       event Action<string> SlotLocked;
       
       bool TryLoadProcessIntoSlot(IProcess process, out string slotId);
       void FreeSlot(string slotId);
       bool UnlockSlot(string slotId);
       bool LockSlot(string slotId);
       string CreateNewSlot(bool startUnlocked = false);
       IReadOnlyList<ISlot> GetAllSlots();
       ISlot GetSlot(string slotId);
       bool CanAllocateProcess(IProcess process);
       float GetAvailableMemory();
       float GetAvailableCpu();
   }
   ```

4. **SceneOrchestrator**: Manages scene loading, switching, and coordination with processes
   ```csharp
   public partial class SceneOrchestrator : Node
   {
       private Dictionary<string, Control> _loadedScenes;
       private string _activeProcessId;
       private ProcessSlotRegistry _processSlotRegistry;
       
       public void Initialize(IProcessManager processManager, ISlotManager slotManager, 
           ProcessSlotRegistry registry, Control mainContent);
       public void ShowScene(string processId);
       public bool LoadScene(string processType, string scenePath);
       public void RequestSceneUnload(string processId = null);
       public void HandleSlotSelected(string slotId, string processId);
       public Control CreateProcessPreview(string processId, Vector2 size);
   }
   ```

5. **SystemEventBus**: Facilitates communication between components
   ```csharp
   public class SystemEventBus
   {
       // Singleton pattern
       public static SystemEventBus Instance { get; }
       
       // Process events
       public event Action<string> ProcessCreated;
       public event Action<string, string> ProcessStarted;
       public event Action<string> ProcessEnded;
       public event Action<string, Dictionary<string, object>> ProcessStateChanged;
       
       // Slot events
       public event Action<string, SlotStatus> SlotStatusChanged;
       public event Action<string> SlotUnlocked;
       public event Action<string> SlotLocked;
       
       // Scene events
       public event Action<string> SceneLoaded;
       public event Action<string, bool> SceneUnloaded;
       
       // System events
       public event Action<SystemMode> SystemModeChanged;
       
       // Publishing methods
       public void PublishProcessStarted(string processId, string slotId);
       public void PublishSlotStatusChanged(string slotId, SlotStatus status);
       // ...etc for all events
   }
   ```

### User Interface Components

1. **SlotGridSystem**: Manages slot interactions and state
   ```csharp
   public partial class SlotGridSystem : Control
   {
       private Dictionary<string, SlotState> _slots;
       private ISlotManager _slotManager;
       private ProcessSlotRegistry _registry;
       
       [Signal] public delegate void SlotStateChangedEventHandler(string slotId, bool isActive, bool isUnlocked, string loadedText);
       [Signal] public delegate void SlotSelectedEventHandler(string slotId, string processId);
       
       public void Initialize(ISlotManager slotManager, ProcessSlotRegistry registry);
       public void SelectSlot(string slotId);
       public IEnumerable<KeyValuePair<string, SlotState>> GetAllSlots();
   }
   ```

2. **SlotGridDisplay**: Visual representation of slots
   ```csharp
   public partial class SlotGridDisplay : Control
   {
       private SlotGridSystem _slotSystem;
       
       public void Initialize(SlotGridSystem slotSystem);
       private void UpdateDisplay();
       private Control CreateSlotButton(string slotId, SlotState state, string prefix, bool isMainMenu = false);
   }
   ```

### Scene Management

1. **Scene Types**: Different scene types for different contexts
   - MainMenuScene: Main menu options
   - CardGameScene: Card game implementation
   - DebugScene: Testing and debugging interface

2. **Scene Interface**: Common interface for managed scenes
   ```csharp
   public interface IOrchestratableScene
   {
       void SetOrchestrator(SceneOrchestrator orchestrator);
       string GetProcessId();
   }
   ```

3. **Scene Lifecycle**: Managed by SceneOrchestrator
   - Loading
   - Switching
   - State preservation
   - Unloading

## Best Practices

### Architecture Principles

1. **Single Responsibility Principle**
   - Each component has a clear, focused role
   - ProcessSlotRegistry manages mappings
   - ProcessManager manages process lifecycle
   - SlotManager manages slot states
   - SceneOrchestrator manages scene transitions

2. **Decoupled Communication**
   - Use SystemEventBus for cross-component communication
   - Components don't need direct references to each other
   - Enables easy testing and replacement

3. **Clean Dependencies**
   - Dependencies are explicit and passed during initialization
   - No global state or service locator pattern
   - Makes the system more testable and maintainable

4. **Proper Cleanup**
   - All components properly disconnect signals
   - References are cleared in _ExitTree
   - Prevents memory leaks and disposed object issues

### Error Handling

1. **Robust Process Management**
   - Validate all process operations
   - Ensure proper cleanup on failures
   - Log errors with clear messages

2. **Scene Switching Safety**
   - Check for valid scenes before switching
   - Handle missing scenes gracefully
   - Ensure proper unloading of resources

3. **Resource Management**
   - Monitor system resource usage
   - Prevent overallocation
   - Clean up resources when no longer needed

### Future Extensibility

1. **Process Types**
   - Abstract IProcess interface allows new process types
   - ProcessManager can instantiate any process type
   - Easy to add new game mechanics as process types

2. **UI Customization**
   - SlotGridDisplay separates visualization from logic
   - Can be extended for different visual styles
   - Supports previews and custom indicators

3. **Cross-Process Features**
   - ProcessSlotRegistry enables cross-process awareness
   - Centralized mapping supports complex interactions
   - Foundation for shared resources between processes