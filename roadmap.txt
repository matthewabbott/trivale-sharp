# Trivale: Development Roadmap

## Human Notes: Core Game Feature Roadmap

### Completed:
- ✅ Basic slot grid implementation
- ✅ Scene switching between slots
- ✅ ProcessSlotRegistry for tracking slot-process relationships
- ✅ System event bus for decoupled communication
- ✅ Interactive MEM slot display
- ✅ Debug sandbox for testing features

### Short-term Goals:
- Process state preservation between switching
- Process previews in MEM slots
- Dynamic slot unlocking visuals
- Resource sharing between processes

### Medium-term Goals:
- Card game encounter/process
- Main Menu enhancements:
  - Roguelite mode
  - Puzzle mode
  - Encounter/Process editor
  - Scenario editor
  - Glossary/Achievements

### Long-term Goals:
- Encounter editor
- Scenario Editor
- Advanced mechanics for encounters

## Phase 1: MEM Slot Foundation (Completed)
1. Core MEM System
   - ✅ Basic slot grid
   - ✅ Resource tracking
   - ✅ State management
   - ✅ Process isolation

2. Process Management
   - ✅ Process lifecycle (create, start, end)
   - ✅ ProcessSlotRegistry for mapping
   - ✅ Process-scene coordination
   - ✅ Event-based communication

3. Scene Switching
   - ✅ SceneOrchestrator implementation
   - ✅ Interactive slot selection
   - ✅ Clean scene transitions
   - ✅ Process-scene mapping

## Phase 2: Enhanced Experience (Current Focus)

1. Process Previews (Next Priority)
   - [ ] Create preview snapshots of processes
   - [ ] Show preview thumbnails in MEM slots
   - [ ] Update previews as process state changes
   - [ ] Add preview animations (optional)

2. Process State Preservation
   - [ ] Save process state when switching
   - [ ] Restore state when returning to process
   - [ ] Handle resource reallocation
   - [ ] Cross-slot state referencing

3. Dynamic Slot Expansion
   - [ ] Animate slot unlocking
   - [ ] Visual feedback for new slots
   - [ ] Connected slots (parent-child relationships)
   - [ ] Resource management visualization

4. Resource Sharing
   - [ ] Track shared resources between processes
   - [ ] UI for resource allocation
   - [ ] Resource transfer between slots
   - [ ] Resource constraints and conflicts

## Phase 3: Game Implementation

1. Card Game Core
   - [ ] Trick-taking game implementation
   - [ ] Card visualization
   - [ ] AI opponents
   - [ ] Game state management

2. Multiple Encounter Types
   - [ ] Standard encounters (Secured Systems)
   - [ ] Backdoor Access encounters
   - [ ] Firewall Breach encounters
   - [ ] Extended encounters (Market, Upgrade)

3. Resource System
   - [ ] Card deck as shared resource
   - [ ] Memory allocation affects available cards
   - [ ] CPU usage affects play options
   - [ ] Security tokens for special actions

4. Cross-Process Mechanics
   - [ ] Draw cards in one process, use in another
   - [ ] Transfer resources between processes
   - [ ] Process chaining for complex puzzles
   - [ ] Cross-slot puzzle solving

## Phase 4: Content and Polish

1. Visual Polish
   - [ ] Terminal effects (scan lines, glow)
   - [ ] Card animations
   - [ ] Process transitions
   - [ ] Resource visualization

2. Content Creation
   - [ ] Story mode encounters
   - [ ] Procedurally generated challenges
   - [ ] Tutorials and guides
   - [ ] Achievement system

3. Testing & Refinement
   - [ ] Gameplay balance testing
   - [ ] UI/UX improvements
   - [ ] Performance optimization
   - [ ] Bug fixing

## Technical Implementation Priorities

### Next Implementation: Process Previews

```csharp
// In SceneOrchestrator.cs
public Control CreateProcessPreview(string processId, Vector2 size)
{
    // Check if we have the process
    if (!_processes.ContainsKey(processId))
        return null;
        
    // Create viewport container
    var container = new SubViewportContainer
    {
        StretchShrink = 2,  // Scale to 50%
        CustomMinimumSize = size
    };
    
    // Create viewport
    var viewport = new SubViewport
    {
        Size = new Vector2I((int)size.X * 2, (int)size.Y * 2),
        RenderTargetUpdateMode = SubViewport.UpdateMode.Once
    };
    container.AddChild(viewport);
    
    // Clone the current scene or create a placeholder
    Control content;
    if (_loadedScenes.TryGetValue(processId, out var originalScene))
    {
        // Create a simplified representation
        content = CreatePreviewContent(originalScene);
    }
    else
    {
        // Create a placeholder
        content = CreatePlaceholder(_processes[processId].Type);
    }
    
    viewport.AddChild(content);
    return container;
}
```

### Next After That: Process State Preservation

```csharp
// In ProcessManager.cs
private Dictionary<string, Dictionary<string, object>> _suspendedStates = new();

public void SuspendProcess(string processId)
{
    if (!_processes.TryGetValue(processId, out var process))
        return;
        
    // Save the current state
    _suspendedStates[processId] = process.GetState();
    
    // Update process status
    _registry.SetProcessStatus(processId, ProcessStatus.Suspended);
    
    // Notify listeners
    _eventBus.PublishProcessSuspended(processId);
}

public void ResumeProcess(string processId)
{
    if (!_processes.TryGetValue(processId, out var process))
        return;
        
    // Restore the state if we have it
    if (_suspendedStates.TryGetValue(processId, out var state))
    {
        process.Initialize(state);
        _suspendedStates.Remove(processId);
    }
    
    // Update process status
    _registry.SetProcessStatus(processId, ProcessStatus.Active);
    
    // Notify listeners
    _eventBus.PublishProcessResumed(processId);
}
```

## Milestone Estimates

1. **Process Previews**: 1-2 weeks
   - Research viewport rendering techniques
   - Implement basic previews
   - Add update mechanism
   - Integrate with slot display

2. **Process State Preservation**: 1-2 weeks
   - Design serialization approach
   - Implement suspend/resume
   - Test with complex state
   - Handle edge cases

3. **Dynamic Slot Expansion**: 1 week
   - Implement animations
   - Add visual feedback
   - Connect with process events
   - Test different scenarios

4. **Resource Sharing**: 2-3 weeks
   - Design resource model
   - Implement tracking system
   - Create UI for visualization
   - Test with multiple processes

5. **Card Game Implementation**: 3-4 weeks
   - Core game logic
   - UI implementation
   - AI behavior
   - Game state management

## Best Practices for Future Development

1. **Architecture**
   - Maintain clear component responsibilities
   - Use SystemEventBus for communication
   - Explicit dependencies
   - Clean error handling

2. **Testing**
   - Unit tests for core logic
   - Integration tests for component interaction
   - Manual testing for UI and experience
   - Regression testing for bug fixes

3. **Performance**
   - Monitor resource usage
   - Optimize scene switching
   - Efficient state serialization
   - Smart preview rendering

4. **Documentation**
   - Keep architecture documentation updated
   - Document interface contracts
   - Add code comments
   - Maintain this roadmap