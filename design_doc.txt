# Trivale: A Terminal-Based Cyberpunk Card Game

## Core Concept
A hacker's interface that serves as both the game's menu system and a core gameplay mechanic. Players take on the role of netrunners who perceive cyberspace through the lens of card games, breaking into corporate systems through a series of terminal interfaces and security layers. The interface itself is part of the puzzle - learning to manipulate system memory, manage resources, and combine tools is key to solving increasingly complex challenges.

## Core Architecture

### Memory Slot System
The game is organized around a fixed set of MEM slots - virtualized containers that can each run a single encounter:

```plaintext
┌─ SYSTEM RESOURCES ──────────────────────────────────┐
│ MEM: [||||----] 4.2/8.0  CPU: [|||-----] 3.1/10.0  │
└──────────────────────────────────────────────────┘

┌─ MEM SLOT 1 ─────┐ ┌─ MEM SLOT 2 ─────┐
│ ACTIVE:          │ │ INACTIVE         │
│ SecurityBreach   │ │ Click to Load    │
└─────────────────┘ └─────────────────┘
```

Each MEM slot:
- Can hold one active encounter
- Has dedicated screen space in a fixed grid
- Shows resource usage (MEM, CPU, NET)
- Can be activated/deactivated
- Displays encounter status and progress

### Resource Management
Core system resources that limit player actions:
- Memory (MEM): Determines number of active slots and complexity of encounters
- Processing (CPU): Affects card play and special abilities
- Bandwidth (NET): Limits cross-encounter interactions
- Security Tokens (SEC): Used for system overrides

### Card System
The card system remains unchanged, with each suit representing a different aspect of system intrusion:

#### Suits (System Protocols)
- Cryptocurrency (♦/Pentacles) - Digital financial systems, resource management
- Infrastructure (♣/Wands) - System backbone, network architecture
- Data Flow (♥/Cups) - Information streams, memory systems
- Process Control (♠/Swords) - Program execution, system logic

#### Card Values
- Number Cards (2-10): Basic programs and scripts
- Face Cards: System Access Levels
  - Jack: System access scripts
  - Queen: Admin privilege escalation
  - King: Root access exploits
  - Ace: Master security override

#### Special Cards
- Virus Cards: Corrupt and modify other cards
- Buffer Overflow: Play multiple cards as one
- Root Kit: Change card properties
- Zero-Day Exploit: Wild cards
- System.dll: Modify game rules
- Firewall.exe: Block certain card effects

### Resource Management
Core system resources that limit player actions:
- Memory (MEM): Limits active scenarios and windows
- Processing (CPU): Affects card play and special abilities
- Bandwidth (NET): Limits cross-scenario interactions
- Security Tokens (SEC): Used for system overrides

### Encounter Types
Each encounter represents a different type of system intrusion, loaded into a MEM slot:

#### Standard Encounters
1. Secured Systems
   - Traditional trick-taking mechanics
   - Fixed hand of cards
   - Process Control focus
   - Moderate MEM usage

2. Backdoor Access
   - Hand selection from card pool
   - Infrastructure focus
   - Strategic pre-planning
   - Low initial MEM usage, increases with hand size

3. Firewall Breach
   - Hand modification mechanics
   - Resource management
   - Mixed suit focus
   - High MEM usage, variable CPU load

#### Extended Encounters
- Upgrade Stations: Modify card properties
- Resource Markets: Trade system resources
- Memory Banks: Store and retrieve game states
- Process Injectors: Modify game rules

### Multi-Encounter Mechanics
The MEM slot system enables strategic use of multiple encounters:
- Cross-slot resource sharing
- State preservation between encounters
- Strategic activation/deactivation of slots
- Parallel puzzle solving
- Resource optimization across slots

## Visual Implementation

### Memory Slot Interface
- Fixed grid layout for slots
- Clear resource usage indicators
- Status and progress displays
- Activation/deactivation controls
- Quick switching between slots

### Terminal Interface
- CRT screen effects (scanlines, phosphor glow)
- Window management system
- Resource visualization
- Alert indicators
- Command line interface

### Card Visualization
- Holographic card projections
- Suit-specific effects
- Power level indicators
- State modification visuals

### Resource Display
- Per-slot memory usage meters
- System-wide resource graphs
- Network bandwidth indicators
- Resource threshold warnings
- Cross-slot resource flow visualization

## Development Priorities

### Phase 1: Core Systems
1. Memory Slot Framework
   - Slot management system
   - Resource tracking
   - Basic window management
   - Encounter loading/unloading

2. Basic Scenario System
   - Hand configuration
   - Player/AI setup
   - Win condition editor
   - Resource requirements

3. Card Game Implementation
   - Core trick-taking mechanics
   - Basic AI behaviors
   - Card effects system
   - Resource costs

### Phase 2: Extended Features
1. Multi-Encounter Framework
   - Cross-slot communication
   - Resource sharing
   - State preservation
   - Parallel optimization

2. Advanced Encounters
   - Upgrade systems
   - Resource markets
   - Rule modification
   - State manipulation

3. AI and Puzzle Generation
   - AI puzzle creation
   - Difficulty scoring
   - Solution validation
   - Constraint generation

### Phase 3: Polish and Content
1. Visual Effects
   - Terminal effects
   - Card animations
   - Resource visualization
   - UI polish

2. Content Creation
   - Scenario chains
   - Puzzle progressions
   - Tutorial content
   - Meta-progression

## Implementation Notes

### Memory Slot Management
- Track resource usage per slot
- Implement slot-specific limits
- Enable cross-slot optimization
- Support state preservation
- Manage activation/deactivation

### Component Design
- Keep game logic separate from presentation
- Use events for component communication
- Implement resource tracking at component level
- Support state serialization for all components

### Resource Management
- Track resource usage per window/component
- Implement resource limits and costs
- Visualize resource usage and thresholds
- Support resource trading and optimization

### Scenario Creation
- Support both manual and AI creation
- Enable cross-scenario state sharing
- Allow for multiple solution paths
- Track resource requirements

### Future Considerations
- Meta-progression systems
- Achievement tracking
- Community puzzle sharing
- Advanced AI behaviors

## Best Practices
- Maintain strict component separation
- Test cross-scenario interactions
- Monitor resource usage
- Document state management
- Support future extensibility